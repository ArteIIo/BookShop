// <auto-generated />
using System;
using Logic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Logic.Migrations
{
    [DbContext(typeof(LibraryDBContext))]
    partial class LibraryDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Logic.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new { AuthorId = 1, Name = "Name0", Surname = "Surname0" },
                        new { AuthorId = 2, Name = "Name1", Surname = "Surname1" },
                        new { AuthorId = 3, Name = "Name2", Surname = "Surname2" },
                        new { AuthorId = 4, Name = "Name3", Surname = "Surname3" },
                        new { AuthorId = 5, Name = "Name4", Surname = "Surname4" }
                    );
                });

            modelBuilder.Entity("Logic.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("BookId");

                    b.ToTable("Books");

                    b.HasData(
                        new { BookId = 1, Name = "Book0" },
                        new { BookId = 2, Name = "Book1" }
                    );
                });

            modelBuilder.Entity("Logic.Models.BookAuthor", b =>
                {
                    b.Property<int>("BookAuthorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorId");

                    b.Property<int>("AuthorIndex");

                    b.Property<int?>("BookId");

                    b.Property<int>("BookIndex");

                    b.HasKey("BookAuthorId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("BookToAuthor");

                    b.HasData(
                        new { BookAuthorId = 1, AuthorIndex = 1, BookIndex = 1 },
                        new { BookAuthorId = 2, AuthorIndex = 2, BookIndex = 1 },
                        new { BookAuthorId = 3, AuthorIndex = 3, BookIndex = 2 },
                        new { BookAuthorId = 4, AuthorIndex = 4, BookIndex = 2 },
                        new { BookAuthorId = 5, AuthorIndex = 5, BookIndex = 2 },
                        new { BookAuthorId = 6, AuthorIndex = 5, BookIndex = 1 }
                    );
                });

            modelBuilder.Entity("Logic.Models.BookGenre", b =>
                {
                    b.Property<int>("BookGenreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookId");

                    b.Property<int>("BookIndex");

                    b.Property<int?>("GenreId");

                    b.Property<int>("GenreIndex");

                    b.HasKey("BookGenreId");

                    b.HasIndex("BookId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookToGenre");

                    b.HasData(
                        new { BookGenreId = 1, BookIndex = 1, GenreIndex = 1 },
                        new { BookGenreId = 2, BookIndex = 1, GenreIndex = 2 },
                        new { BookGenreId = 3, BookIndex = 2, GenreIndex = 3 },
                        new { BookGenreId = 4, BookIndex = 2, GenreIndex = 4 },
                        new { BookGenreId = 5, BookIndex = 2, GenreIndex = 5 },
                        new { BookGenreId = 6, BookIndex = 1, GenreIndex = 5 }
                    );
                });

            modelBuilder.Entity("Logic.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new { GenreId = 1, Name = "Genre0" },
                        new { GenreId = 2, Name = "Genre1" },
                        new { GenreId = 3, Name = "Genre2" },
                        new { GenreId = 4, Name = "Genre3" },
                        new { GenreId = 5, Name = "Genre4" }
                    );
                });

            modelBuilder.Entity("Logic.Models.BookAuthor", b =>
                {
                    b.HasOne("Logic.Models.Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId");

                    b.HasOne("Logic.Models.Book")
                        .WithMany("AuthorsList")
                        .HasForeignKey("BookId");
                });

            modelBuilder.Entity("Logic.Models.BookGenre", b =>
                {
                    b.HasOne("Logic.Models.Book")
                        .WithMany("GenresList")
                        .HasForeignKey("BookId");

                    b.HasOne("Logic.Models.Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId");
                });
#pragma warning restore 612, 618
        }
    }
}
